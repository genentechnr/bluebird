/*** Generated by streamline 0.6.0 (fibers) - DO NOT EDIT ***/var fstreamline__ = require("streamline/lib/fibers/runtime"); ((function(fstreamline_F__) {  function F(_) {   return fstreamline_F__.apply(this, arguments);  };  F.fstreamlineFunction = fstreamline_F__.fstreamlineFunction;  return F;})(fstreamline__.create(function(_) { require('../lib/fakes');

module.exports = (function(fstreamline_F__) {  function F(stream, idOrPath, tag, _) {   return fstreamline_F__.apply(this, arguments);  };  F.fstreamlineFunction = fstreamline_F__.fstreamlineFunction;  return F;})(fstreamline__.create(function upload(stream, idOrPath, tag, _) {
    var blob = blobManager.create(account);
    var tx = db.begin();
    try {
        var blobId =  fstreamline__.invoke(blob, "put", [stream, _], 1); 
        var file =  fstreamline__.invoke(self.byUuidOrPath(idOrPath), "get", [_], 0); 
        var previousId = file ? file.version : null;
        var version = {
            userAccountId: userAccount.id,
            date: new Date(),
            blobId: blobId,
            creatorId: userAccount.id,
            previousId: previousId,
        };
        version.id = Version.createHash(version);
        fstreamline__.invoke(Version.insert(version), "execWithin", [tx, _], 1);
        if (!file) {
            var splitPath = idOrPath.split('/');
            var fileName = splitPath[splitPath.length - 1];
            var newId = uuid.v1();
            var file = {
                id: newId,
                userAccountId: userAccount.id,
                name: fileName,
                version: version.id
            };
            var q =  fstreamline__.invoke(self, "createQuery", [idOrPath, file, _], 2);
             fstreamline__.invoke(q, "execWithin", [tx, _], 1);
        }
        fstreamline__.invoke(FileVersion.insert({fileId: file.id,versionId: version.id}), "execWithin", [tx, _], 1);
        fstreamline__.invoke(File.whereUpdate({id: file.id}, {version: version.id}), "execWithin", [tx, _], 1); 
        fstreamline__.invoke(tx, "commit", [_], 0);
    } catch (err) {
        tx.rollback();
        throw err; //Error(err);
    }
}, 3));


}, 0)).call(this, function(err) {
  if (err) throw err;
}));