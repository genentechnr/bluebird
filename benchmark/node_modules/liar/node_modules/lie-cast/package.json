{
  "name": "lie-cast",
  "version": "0.1.1",
  "description": "cast a lie",
  "main": "lib/cast.js",
  "scripts": {
    "test": "./node_modules/istanbul/lib/cli.js test ./node_modules/mocha/bin/_mocha test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/calvinmetcalf/lie-cast.git"
  },
  "keywords": [
    "lie",
    "promise",
    "async"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/calvinmetcalf/lie-cast/issues"
  },
  "devDependencies": {
    "mocha-as-promised": "~1.4.0",
    "chai-as-promised": "~4.0.0",
    "chai": "~1.8.1",
    "mocha": "~1.13.0",
    "istanbul": "~0.1.44"
  },
  "dependencies": {
    "lie-resolve": "~0.1.0"
  },
  "readme": "\n# liar\n\n  a toolbelt of deceit\n\n## API\n\n```bash\nnpm install liar\n```\n\n```javascript\nvar promise = require('liar');\n```\n\n###all\n\n```javascript\npromise.all(array of promises)\n```\n\nreturns a promise for an array of all the responses, returns an error if any of the promises throw errors. Returned values are in the same order as the input array.\n\n###some\n\n```javascript\npromise.some(array of promises)\n```\n\nSimilar to all but will only throw an error if all of the promises throw errors, otherwise returns an array of whichever values succeded in the order that they completed, on error returns an array of errors.\n\n###map\n\n```javascript\npromise.map(array of promises, function)\n```\n\nTakes the array of values, applies function to them, and returns a promise for all the values. Function will be called with a value (not a promise) and may return either a promise or a value, array can filled with promises or values or a mixture.\n\n\n###race\n\n```javascript\npromise.race(array of promises)\n```\n\nresolved with whatever value or error that resolves first.\n\n###cast\n\n```javascript\npromise.cast(value or promise)\n```\n\nIf it's a promise, returns it, if it's a value, returns a promise that resolves to it.\n\n###use\n\n```javascript\npromise.use(value or promise, function)\n```\n\nIf the value is a promise, apply the function to the value it resolves into and return a promise for that, otherwise apply the function to the value and return the result.\n\n###resolve\n\n```javascript\npromise.resolve(value)\n```\n\ncreate a promise that is resolved with this value.\n\n###reject\n\n```javascript\npromise.reject(value)\n```\n\ncreate a promise that is rejected with this value.\n\n## License\n\n  MIT\n",
  "readmeFilename": "readme.md",
  "homepage": "https://github.com/calvinmetcalf/lie-cast",
  "_id": "lie-cast@0.1.1",
  "dist": {
    "shasum": "f574a9f596ff47456ccedb2288bb46935e8c078b"
  },
  "_resolved": "https://registry.npmjs.org/lie-cast/-/lie-cast-0.1.1.tgz",
  "_from": "lie-cast@~0.1.1"
}
