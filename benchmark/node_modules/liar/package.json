{
  "name": "liar",
  "version": "0.3.0",
  "description": "A modular collection of tools for asynchronous programing via promises",
  "main": "lib/index.js",
  "scripts": {
    "test": "./node_modules/istanbul/lib/cli.js test ./node_modules/mocha/bin/_mocha test/test.js node_modules/lie-*/test/test.js --no-default-excludes -x **/test/** -x **/tests/** -x **/node_modules/*/node_modules/** -x **/node_modules/grun*/**  -x **/node_modules/moch*/** -x **/node_modules/cha*/** -x **/node_modules/istanbul/**"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/calvinmetcalf/liar.git"
  },
  "keywords": [
    "lie",
    "promise",
    "async"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/calvinmetcalf/liar/issues"
  },
  "devDependencies": {
    "grunt-contrib-uglify": "~0.2.4",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.4",
    "mocha-as-promised": "~1.4.0",
    "chai-as-promised": "~4.0.0",
    "chai": "~1.8.1",
    "mocha": "~1.13.0",
    "istanbul": "~0.1.44",
    "grunt-browserify": "~1.2.11",
    "lie-quickmap": "~0.1.2",
    "lie-quickeach": "~0.1.2"
  },
  "dependencies": {
    "lie-cast": "~0.1.1",
    "lie-resolve": "~0.1.1",
    "lie-all": "~0.1.3",
    "lie-reject": "~0.1.2",
    "lie-use": "~0.1.0",
    "lie-map": "~0.1.3",
    "lie-race": "~0.1.3",
    "lie-some": "~0.1.3",
    "lie-denodify": "~0.1.1",
    "lie-lfold": "~0.1.2",
    "lie-apply": "~0.1.0",
    "lie-fold": "~0.1.1",
    "lie-rfold": "~0.1.1",
    "lie-zip": "~0.1.1",
    "lie-zipwith": "~0.1.1",
    "lie-filter": "~0.1.2",
    "lie-every": "~0.1.1",
    "lie-any": "~0.1.2",
    "lie": "~2.3.0"
  },
  "readme": "# liar\n\n  A modular collection of tools for asynchronous programing via promises, all tools are available as a bundle here or standalone in their own repo.\n\n## API\n\n```bash\nnpm install liar\n```\n\n```javascript\nvar promise = require('liar');\n```\n\n###[basic promise](https://github.com/calvinmetcalf/lie)\n\n```javascript\npromise(function(resolve,reject){\n    resolve(value);\n    //or\n    reject(reason);\n});\n```\n\na shortcut to [my library lie](ttps://github.com/calvinmetcalf/lie). You need to give it a function\nwhich takes 2 arguments, a function to call on success and one to call on failure.\n\n###[all](https://github.com/calvinmetcalf/lie-all)\n\n```javascript\npromise.all(array (or promise for an array) of promises)\n```\n\nreturns a promise for an array of all the responses, returns an error if any of the promises throw errors. Returned values are in the same order as the input array.\n\n###[some](https://github.com/calvinmetcalf/lie-some)\n\n```javascript\npromise.some(array (or promise for an array) of promises)\n```\n\nSimilar to all but will only throw an error if all of the promises throw errors, otherwise returns an array of whichever values succeeded in the order that they completed, on error returns an array of errors.\n\n###[map](https://github.com/calvinmetcalf/lie-map)\n\n```javascript\npromise.map(array (or promise for an array) of promises, function)\n```\n\nTakes the array of values, applies function to them, and returns a promise for all the values. Function will be called with a value (not a promise) and may return either a promise or a value, array can filled with promises or values or a mixture.\n\n\n###[race](https://github.com/calvinmetcalf/lie-race)\n\n```javascript\npromise.race(array (or promise for an array) of promises)\n```\n\nresolved with whatever value or error that resolves first.\n\n###[cast](https://github.com/calvinmetcalf/lie-cast)\n\n```javascript\npromise.cast(value or promise)\n```\n\nIf it's a promise, returns it, if it's a value, returns a promise that resolves to it.\n\n###[use](https://github.com/calvinmetcalf/lie-use)\n\n```javascript\npromise.use(value or promise, function)\n```\n\nIf the value is a promise, apply the function to the value it resolves into and return a promise for that, otherwise apply the function to the value and return the result.\n\n###[resolve](https://github.com/calvinmetcalf/lie-resolve)\n\n```javascript\npromise.resolve(value)\n```\n\ncreate a promise that is resolved with this value.\n\n###[reject](https://github.com/calvinmetcalf/lie-reject)\n\n```javascript\npromise.reject(value)\n```\n\ncreate a promise that is rejected with this value.\n\n###[denodify](https://github.com/calvinmetcalf/lie-denodify)\n\n```javascript\npromise.denodify(function)\n```\n\ntakes as an argument a function which has a callback as it's last argument, returns a function that acts identically except it returns a promise instead of taking a callback.\n\n###[fold left](https://github.com/calvinmetcalf/lie-lfold)\n\n```javascript\npromise.lfold(array (or promise for an array) of things,function,accumulator)\n```\n\nlike Array.prototype.reduce, but the array may include promises or values and the function may return a promise or a value. `promise.lfold` always return a promise.\n\n###[fold right](https://github.com/calvinmetcalf/lie-rfold)\n\n```javascript\npromise.rfold(array (or promise for an array) of things,function,accumulator)\n```\n\nlike Array.prototype.reduceRight, but the array may include promises or values and the function may return a promise or a value. `promise.rfold` always return a promise.\n\nin other words it's like [fold left](https://github.com/calvinmetcalf/lie-lfold) but starts at the right\n\n###[fold](https://github.com/calvinmetcalf/lie-fold)\n\n```javascript\npromise.fold(array (or promise for an array) of things,function,accumulator)\n```\n\nlike Array.prototype.reduce, but the array may include promises or values and the function may return a promise or a value. `promise.fold` always return a promise.\n\nunlike [lfold](https://github.com/calvinmetcalf/lie-lfold) and [rfold](https://github.com/calvinmetcalf/lie-rfold) fold calls the values in the order the promises resolve.\n\n###[apply](https://github.com/calvinmetcalf/lie-apply)\n\n```javascript\npromise.apply(function, one or more values or promises)\n```\n\ncalls the function with the values or promises once they all resolve, returns the result.\n\n###[zip](https://github.com/calvinmetcalf/lie-zip)\n\n```javascript\npromise.zip(one or more arrays of things (or promises for arrays))\n```\n\npromise.zips the 2 or more arrays up such that `zip([1,2],['a','b'])` returns `[[1,'a'],[2,'b']];`. When called with one array it is equivalent to [lie-map](https://github.com/calvinmetcalf/lie-map) called with the `function(a){return [a]}`.\n\n###[zipwith](https://github.com/calvinmetcalf/lie-zipwith)\n\n```javascript\npromise.zipwith(function,one or more arrays of things (or promises for arrays)\n```\n\nzips the 2 or more arrays up with a function 'func' such that `zip(func(1,2),func('a','b'))` returns `[func(1,'a'),func(2,'b')];`. When called with one array it is equivalent to [lie-map](https://github.com/calvinmetcalf/lie-map) (with the arguments in reverse order).\n\n###[filter](https://github.com/calvinmetcalf/lie-filter)\n\n```javascript\npromise.filter(array (or promise for an array), function)\n```\n\nreturns an array filtered based on the function, aka only truthy values are returned.\n\n###[every](https://github.com/calvinmetcalf/lie-every)\n\n```javascript\npromise.every(array (or promise for an array)[, function])\n```\n\nApplies the function the the array of promies or values (or mix) and returns true if they are all truthy.\n\nIt is lazy and will resolve as soon as the first falsy value is encountered.\n\nIf the function is omited then it tests the truthiness of the values.\n\n###[any](https://github.com/calvinmetcalf/lie-any)\n\n```javascript\npromise.any(array (or promise for an array)[, function])\n```\n\nApplies the function the the array of promies or values (or mix) and returns true if at least one value is truthy.\n\nIt is lazy and will resolve as soon as one value returns true, if the function is omited then it tests the truthiness of the array.\n\n## License\n\n  MIT\n",
  "readmeFilename": "readme.md",
  "homepage": "https://github.com/calvinmetcalf/liar",
  "_id": "liar@0.3.0",
  "dist": {
    "shasum": "611acd1aac23838cbe6315e4880413d338ef02d2"
  },
  "_resolved": "https://registry.npmjs.org/liar/-/liar-0.3.0.tgz",
  "_from": "liar@latest"
}
